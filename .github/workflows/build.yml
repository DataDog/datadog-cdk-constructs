name: build

on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node 18
        uses: actions/setup-node@v1
        with:
          node-version: 18

      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ matrix.working-dir }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install

      - name: Synthesize project files
        run: npx projen

      - name: Anti-tamper check
        run: |-
          if ! git diff --exit-code; then
            echo "Do not directly edit the project files generated by Projen. Add your changes to '.projenrc.js' then run 'npx projen'."
            exit 1
          fi

      - name: Check formatting
        run: yarn check-formatting

      - name: Lint
        run: yarn eslint

  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ matrix.working-dir }}

      - name: Install common dependencies
        working-directory: ./
        run: yarn install

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install

      - name: Build
        run: yarn build

      - name: Authenticate Docker to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Run tests
        run: yarn test
